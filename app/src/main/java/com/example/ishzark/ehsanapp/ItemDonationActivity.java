package com.example.ishzark.ehsanapp;import android.app.DownloadManager;import android.app.ProgressDialog;import android.content.Intent;import android.graphics.Bitmap;import android.net.Network;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Looper;import android.provider.MediaStore;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.telephony.SmsManager;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.ImageView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.common.api.Response;import com.google.android.gms.common.util.IOUtils;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.common.cache.Cache;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.StorageTask;import com.google.firebase.storage.UploadTask;import com.loopj.android.http.AsyncHttpResponseHandler;import com.loopj.android.http.JsonHttpResponseHandler;import com.loopj.android.http.RequestParams;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.Reader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import cz.msebera.android.httpclient.Header;import cz.msebera.android.httpclient.HttpResponse;import cz.msebera.android.httpclient.client.HttpClient;import cz.msebera.android.httpclient.client.methods.HttpPost;import cz.msebera.android.httpclient.entity.StringEntity;import cz.msebera.android.httpclient.impl.client.DefaultHttpClient;import cz.msebera.android.httpclient.message.BasicHeader;import cz.msebera.android.httpclient.params.HttpConnectionParams;import cz.msebera.android.httpclient.protocol.HTTP;public class ItemDonationActivity extends AppCompatActivity {    private static final String URL = "https://mobily.ws/api/msgSend.php";    private Button choosebtn;private ImageView imageView;private Uri filePath;private int PICK_IMAGE_REQUEST=71;private Button donatebtn;private  String donorname;private EditText number;private EditText detials;public String chosendonationtype;public String chosenitemstatus;private FirebaseAuth auth;FirebaseStorage storage;StorageReference storageReference;private static final String TAG = "ItemDonaationActivity";private CheckBox agreementcb;public String date;public  FirebaseUser user;private TextView agreement ; String Username = "mariamedu"; String Password="ehsan2019";  String Sender= "Ehsan";  String Message ="لقد تم استلام طلب تبرعك وسيتم التواصل معك خلال ٢-٣ايام عمل";    DatabaseReference RequestRef=FirebaseDatabase.getInstance().getReference("Items");    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.itemdonation);        number=findViewById(R.id.numberofitems);        detials=findViewById(R.id.detailstext);        agreementcb=findViewById(R.id.agreementCb);        date=new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date());         auth = FirebaseAuth.getInstance();          user = auth.getCurrentUser();          agreement=findViewById(R.id.agreementv);          agreement.setOnClickListener(new View.OnClickListener() {              @Override              public void onClick(View v) {                    startActivity(new Intent(ItemDonationActivity.this,Pop.class));              }          });///////////////////////////////Donation Type Spinner/////////////////////////////////        Spinner spinner = findViewById(R.id.donationtypespinner);        String[] types=getResources().getStringArray(R.array.donationtype_array);        ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.citycpinnerlayout,R.id.listtext, types);        spinner.setAdapter(adapter);        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                chosendonationtype=String.valueOf(parent.getItemAtPosition(position));            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                chosendonationtype=String.valueOf(parent.getItemAtPosition(0));            }        });///////////////////////////////Item Status Spinner/////////////////////////////////        Spinner spinner2 = findViewById(R.id.itemstatusspinner);        String[] status=getResources().getStringArray(R.array.item_status_array);        ArrayAdapter<String> adapter2=new ArrayAdapter<String>(this,R.layout.citycpinnerlayout,R.id.listtext, status);        spinner2.setAdapter(adapter2);        spinner2.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                chosenitemstatus=String.valueOf(parent.getItemAtPosition(position));            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                chosenitemstatus=String.valueOf(parent.getItemAtPosition(0));            }        });        choosebtn= findViewById(R.id.upload);        donatebtn=findViewById(R.id.donatebtn);        imageView= findViewById(R.id.uploadedimage);        storage=FirebaseStorage.getInstance();        storageReference=storage.getReference();        choosebtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                chooseImage();            }        });        donatebtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(agreementcb.isChecked()){                    uploadRequest();                }else                {                    Toast.makeText(ItemDonationActivity.this,R.string.serviceagreement,Toast.LENGTH_SHORT).show();                }            }        });    }        public void uploadRequest(){        //Upload rest of request            final DatabaseReference refe = FirebaseDatabase.getInstance().getReference().child("Donors");        refe.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                boolean found=false;                //final String userID = user.getUid();                 final String mobile =  user.getPhoneNumber();                for (DataSnapshot child : dataSnapshot.getChildren()) {                    String phone = child.child("phone").getValue().toString();                 //   Log.d(TAG,"phone found"+mobile.replace("+966",""));                    if (phone.equals(mobile.replace("+966",""))) {                           donorname = child.child("name").getValue().toString();                       // Log.d(TAG,"name found"+donorname);                            found=true;                    }}                    if(found){                        Intent intent = getIntent();                        String location=intent.getStringExtra("chosencity");                        String numberofitemes = number.getText().toString().trim();                        String detailofitems = detials.getText().toString();                        if (numberofitemes.isEmpty()) {                            number.setError(getString(R.string.input_error_name));                            number.requestFocus();                            return;                        }                        final DonateItems Newrequest=new DonateItems();                        Newrequest.setPhone(mobile);                        Newrequest.setItem_type(chosendonationtype);                        Newrequest.setItem_status(chosenitemstatus);                        Newrequest.setItemDetails(detailofitems);                        Newrequest.setDonor_name(donorname.toString());                        Newrequest.setQuantity(numberofitemes);                        Newrequest.setLocation(location);                        Newrequest.setDate(date.toString());                        Newrequest.setRequestStatus(getString(R.string.DefaultStatus));                     //   Log.d(TAG,"Founded details"+mobile+chosendonationtype+chosenitemstatus+detailofitems);                          final ProgressDialog progressDialog=new ProgressDialog(ItemDonationActivity.this);                         progressDialog.setTitle(R.string.uploading);                        //UPLOAD IMAGE                        String UserId=FirebaseAuth.getInstance().getCurrentUser().getUid();                        String Date=date;                        String ImgPath="ItemRequest: "+Date;                        if(filePath!=null){                           // progressDialog.show();                            StorageReference ref= storageReference.child(ImgPath+"/");                            //Upload the rest of request                            ref.putFile(filePath).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                                boolean uploade=false;                                @Override                                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                                    StorageTask t= taskSnapshot.getTask();                                    Newrequest.setUrl(storageReference.getDownloadUrl().toString());                                   // String smsphone=user.getPhoneNumber();                                     uploade=true;                                    String RequestKey=RequestRef.push().getKey();                                    RequestRef.child(RequestKey).setValue(Newrequest).addOnCompleteListener(new OnCompleteListener<Void>() {                                        @Override                                        public void onComplete(@NonNull Task<Void> task) {                                            if (task.isSuccessful()) {                                               // sendSMS();                                                startActivity(new Intent(ItemDonationActivity.this,GifActivity.class));                                                finish();                                            } else {                                                Toast.makeText(ItemDonationActivity.this, R.string.notuploading, Toast.LENGTH_SHORT).show();                                            }                                        }}                                    );                                }                            }                            ).addOnFailureListener(new OnFailureListener() {                                @Override                                public void onFailure(@NonNull Exception e) {                                }                            });                        }else {                            Toast.makeText(ItemDonationActivity.this,"الرجاء إرفاق صورة", Toast.LENGTH_SHORT).show();                        }                    }                } @Override                public void onCancelled(@NonNull DatabaseError databaseError) {            }});    }    private void sendSMS( ) {        String mobile=user.getPhoneNumber();        final RequestParams params=new RequestParams();         Log.d(TAG,"mobile"+mobile.replace("+","").toString());        params.add("mobile",Username);        params.add("password",Password);        params.add("returnJson","1");        params.add("sender",Sender);        params.add("msg", Utils.convertUnicode(Message));        params.add("numbers",mobile.replace("+",""));        params.add("applicationType","68");       params.add("dateSend","03/12/2019");        params.add("timeSend","3:30:00");        MyConnectionType.get("https://mobily.ws/api/msgSend.php",params,new JsonHttpResponseHandler()                {                    @Override                    public void onSuccess(int statusCode, cz.msebera.android.httpclient.Header[] headers, org.json.JSONObject response) {                        Log.d(TAG, "objapi"+response.toString());                        Toast.makeText(ItemDonationActivity.this, "sms sent", Toast.LENGTH_SHORT).show();                    }                }        );    }            private void chooseImage() {        Intent intent=new Intent();        intent.setType("image/*");        intent.setAction(intent.ACTION_GET_CONTENT);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {            startActivityForResult(intent.createChooser(intent,"select Picture"),PICK_IMAGE_REQUEST);        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if(requestCode==PICK_IMAGE_REQUEST && resultCode==RESULT_OK                && data !=null && data.getData() != null)        {            filePath=data.getData();            try {                Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(),filePath);                imageView.setImageBitmap(bitmap);            }            catch (IOException e)            {             e.printStackTrace();            }        }    }    protected void sendJson(final String userName, final String password,                            final String sender, final String msg, final String numbers, final String dateSend,                            final String timeSend, final String deleteKey, final String msgId,                            final String applicationType, final String domainName) {        Thread t = new Thread() {            public void run() {                Looper.prepare(); //For Preparing Message Pool for the child Thread                HttpClient client = new DefaultHttpClient();                HttpConnectionParams.setConnectionTimeout(client.getParams(), 10000); //Timeout Limit                HttpResponse response;                JSONObject json = new JSONObject();                try {                    HttpPost post = new HttpPost(URL);                    JSONObject jsonData = new JSONObject();                    jsonData.put("sender", sender);                    jsonData.put("msg", msg);                    jsonData.put("numbers", numbers);                    jsonData.put("dateSend", dateSend);                    jsonData.put("timeSend", timeSend);                    jsonData.put("deleteKey", deleteKey);                    jsonData.put("msgId", msgId);                    jsonData.put("applicationType", applicationType);                    jsonData.put("domainName", domainName);                    jsonData.put("mobile", userName);                    jsonData.put("password", password);                    StringEntity se = new StringEntity( json.toString());                    se.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, "application/json"));                    post.setEntity(se);                    response = client.execute(post);                    /*Checking response */                    if(response!=null){                        InputStream in = response.getEntity().getContent(); //Get the data in the entity                      //  Toast.makeText(ItemDonationActivity.this, "sms sent", Toast.LENGTH_SHORT).show();                    }                } catch(Exception e) {                    e.printStackTrace();                    //createDialog("Error", "Cannot Estabilish Connection");                }                Looper.loop(); //Loop in the message queue            }        };        t.start();    }}